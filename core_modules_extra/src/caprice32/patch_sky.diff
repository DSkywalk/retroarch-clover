diff --git a/Makefile b/Makefile
index bb3b60c..c1a63a0 100644
--- a/Makefile
+++ b/Makefile
@@ -36,12 +36,25 @@ endif
 CC_AS ?= $(CC)
 LIBM  :=  -lm
 LIBZ  := -lz
+
+NESMINI=1
+
 # Unix
 ifneq (,$(findstring unix,$(platform)))
+ifeq ($(NESMINI), 1)
+	CC = arm-linux-gnueabihf-gcc
+	CXX = arm-linux-gnueabihf-g++
+	AR = arm-linux-gnueabihf-ar
+	CC_AS = arm-linux-gnueabihf-gcc
+	PLATFORM_DEFINES += -marm -mcpu=cortex-a7
+	EXTRA_INCLUDES := -I./libs/zlib
+	LIBS := -L./libs/zlib
+	SHARED := -shared -Wl,-version-script=link.T
+else
+	SHARED := -shared -Wl,-version-script=link.T -Wl,-no-undefined
+endif
 	TARGET := $(TARGET_NAME)_libretro.so
 	fpic := -fPIC
-	SHARED := -shared -Wl,-version-script=link.T -Wl,-no-undefined
-
 else ifneq (,$(findstring linux-portable,$(platform)))
 	TARGET := $(TARGET_NAME)_libretro.so
 	fpic := -fPIC -nostdlib
diff --git a/libretro/nukleargui/app.c b/libretro/nukleargui/app.c
index 0e72be9..d92b22a 100644
--- a/libretro/nukleargui/app.c
+++ b/libretro/nukleargui/app.c
@@ -334,8 +337,154 @@ void Core_Processkey()
 
 }
 
+/* SKY NES MINI MOD! */
+extern uint8_t keyboard_matrix[16];
+const uint8_t bit_values[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 };
+#define MAX_INPUTS 2
+#define MAX_BUTTONS 14
+#define MAX_BTNPLY2 10
+#define ID_PLAYER1 0
+#define ID_PLAYER2 1
+
+unsigned int last_input[MAX_INPUTS] = {0,0};
+unsigned int padnum = 0, last_event = 0, padcfg = 0;
+
+const uint8_t translatePAD[2][MAX_BUTTONS] = { {
+    0x95, // B        -- FIRE2
+    0x53, // Y        -- Y
+    0xff, // SELECT   ** ALT MODE
+    0x54, // START    -- H
+    0x90, // DUP      -- JUP
+    0x91, // DDOWN    -- JDW
+    0x92, // DLEFT    -- JLF
+    0x93, // DRIGHT   -  JRG
+    0x94, // A        -- FIRE1
+    0x56, // X        -- N
+    0x22, // L        -- RETURN
+    0x57, // R        -- SPACE
+    0x80, // L2       -- 1
+    0x81, // R2       -- 2
+    },
+    {
+    0x25, // B      -- SHIFT
+    0x27, // Y      -- CTRL
+    0xff, // SELECT ** ALT MODE
+    0x62, // START  -- R
+    0x00, // DUP    -- CUP
+    0x02, // DDOWN  -- CDW
+    0x10, // DLEFT  -- CLF
+    0x01, // DRIGHT -- CRG
+    0x57, // A      -- SPACE
+    0x11, // X      -- COPY
+    0x06, // L      -- ENTER
+    0x97, // R      -- BCKSPC
+    0x15, // L2     -- F1
+    0x16, // R2     -- F2
+    }
+};
+
+unsigned int special_events()
+{
+    unsigned int pressed = 0;
+    if (input_state_cb(0, RETRO_DEVICE_JOYPAD, 0, RETRO_DEVICE_ID_JOYPAD_B)) {
+        pressed = 1 << 0;
+        if(pressed != last_event)
+            kbd_buf_feed("3");
+    } else if (input_state_cb(0, RETRO_DEVICE_JOYPAD, 0, RETRO_DEVICE_ID_JOYPAD_Y)) {
+        pressed = 1 << 1;
+        if(pressed != last_event) {
+            kbd_buf_feed("1");
+        }
+    } else if (input_state_cb(0, RETRO_DEVICE_JOYPAD, 0, RETRO_DEVICE_ID_JOYPAD_START)) {
+        pressed = 1 << 3;
+        if(pressed != last_event) {
+            padcfg ^= 1;
+            printf("Pad Config Changed: %i\n", padcfg);
+        }
+    } else if (input_state_cb(0, RETRO_DEVICE_JOYPAD, 0, RETRO_DEVICE_ID_JOYPAD_UP)) {
+        pressed = 1 << 4;
+        if(pressed != last_event) {
+            if (padcfg)
+                kbd_buf_feed("RUN\"DISC\n");
+            else
+                kbd_buf_feed("RUN\"DISK\n");
+        }
+    } else if (input_state_cb(0, RETRO_DEVICE_JOYPAD, 0, RETRO_DEVICE_ID_JOYPAD_DOWN)) {
+        pressed = 1 << 5;
+        if(pressed != last_event)
+            kbd_buf_feed("|TAPE\nRUN\"\n^");
+    } else if (input_state_cb(0, RETRO_DEVICE_JOYPAD, 0, RETRO_DEVICE_ID_JOYPAD_LEFT)) {
+        pressed = 1 << 6;
+        if(pressed != last_event)
+            kbd_buf_feed("CAT\n");
+    } else if (input_state_cb(0, RETRO_DEVICE_JOYPAD, 0, RETRO_DEVICE_ID_JOYPAD_RIGHT)) {
+        pressed = 1 << 7;
+        if(pressed != last_event)
+            kbd_buf_feed("|CPM\n");
+    } else if (input_state_cb(0, RETRO_DEVICE_JOYPAD, 0, RETRO_DEVICE_ID_JOYPAD_A)) {
+        pressed = 1 << 8;
+        if(pressed != last_event)
+            kbd_buf_feed("4");
+    } else if (input_state_cb(0, RETRO_DEVICE_JOYPAD, 0, RETRO_DEVICE_ID_JOYPAD_X)) {
+        pressed = 1 << 9;
+        if(pressed != last_event)
+            kbd_buf_feed("2");
+    }
+    
+    return pressed;
+}
+
+void Core_PollEvent()
+{
+    unsigned int value = 0;
+    
+    input_poll_cb();
+    //Core_Processkey();
+    
+    //special modes - joy 1
+    if( input_state_cb(0, RETRO_DEVICE_JOYPAD, 0, RETRO_DEVICE_ID_JOYPAD_SELECT)) {
+        last_event = special_events();
+        return;
+    }    
+
+    // player 1
+    for (int i = 0; i < MAX_BUTTONS; i++) {
+        value = 1 << i;
+        if (input_state_cb(ID_PLAYER1, RETRO_DEVICE_JOYPAD, 0, i)) {
+            if(!(last_input[ID_PLAYER1] & value)) {
+                //printf(" ON: %i %x = %x\n", i, value, (int) translatePAD[padcfg][i]);
+                keyboard_matrix[translatePAD[padcfg][i] >> 4] &= ~bit_values[translatePAD[padcfg][i] & 7]; // key is being held down
+                last_input[ID_PLAYER1] |= value;
+            }
+        }
+        else if (last_input[ID_PLAYER1] & value) {
+            //printf("OFF: %i %x\n", i, value);
+            keyboard_matrix[translatePAD[padcfg][i] >> 4] |= bit_values[translatePAD[padcfg][i] & 7]; // key is being held down
+            last_input[ID_PLAYER1] &= ~value;
+        }
+    }
+    
+    // player 2
+    for (int i = 0; i < MAX_BTNPLY2; i++) {
+        value = 1 << i;
+        if (input_state_cb(ID_PLAYER2, RETRO_DEVICE_JOYPAD, 0, i)) {
+            if(!(last_input[ID_PLAYER2] & value)) {
+                //printf(" ON: %i %x = %x\n", i, value, (int) translatePAD[padcfg][i]);
+                keyboard_matrix[translatePAD[padcfg^1][i] >> 4] &= ~bit_values[translatePAD[padcfg^1][i] & 7]; // key is being held down
+                last_input[ID_PLAYER2] |= value;
+            }
+        }
+        else if (last_input[ID_PLAYER2] & value) {
+            //printf("OFF: %i %x\n", i, value);
+            keyboard_matrix[translatePAD[padcfg^1][i] >> 4] |= bit_values[translatePAD[padcfg^1][i] & 7]; // key is being held down
+            last_input[ID_PLAYER2] &= ~value;
+        }
+    }
+}
+
+#if 0
 // Core input (not GUI) 
-int Core_PollEvent()
+int Core_PollEvent_old()
 {
 	//   RETRO        B    Y    SLT  STA  UP   DWN  LEFT RGT  A    X    L    R    L2   R2   L3   R3
     //   INDEX        0    1    2    3    4    5    6    7    8    9    10   11   12   13   14   15
@@ -476,4 +627,4 @@ if(amstrad_devices[0]==RETRO_DEVICE_AMSTRAD_JOYSTICK){
 return 1;
 
 }
-
+#endif
